// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rental.Infrastructure.DatabaseContext;

#nullable disable

namespace Rentals.Infrastructure.Migrations
{
    [DbContext(typeof(RentalContext))]
    partial class RentalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Rental.Domain.Models.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RentalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId");

                    b.HasIndex("RentalId");

                    b.ToTable("Car", (string)null);

                    b.HasData(
                        new
                        {
                            CarId = new Guid("5a15ec11-e67c-46a8-bcbe-f5e008d13fd0"),
                            Details = "Test details",
                            Name = "Toyota Yaris",
                            Price = 3500000m,
                            RentalId = new Guid("5fabf3ba-ae75-432f-9d3b-ffe00c2fa8df"),
                            Status = "New"
                        });
                });

            modelBuilder.Entity("Rental.Domain.Models.CarRental", b =>
                {
                    b.Property<Guid>("CarRentalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("CarRentalId");

                    b.ToTable("CarRental", (string)null);

                    b.HasData(
                        new
                        {
                            CarRentalId = new Guid("5fabf3ba-ae75-432f-9d3b-ffe00c2fa8df"),
                            CarId = new Guid("5a15ec11-e67c-46a8-bcbe-f5e008d13fd0"),
                            CustomerId = new Guid("b64608ea-f373-4103-9856-2b31169acf9a"),
                            From = new DateTime(2024, 3, 1, 15, 31, 59, 316, DateTimeKind.Local).AddTicks(4759),
                            Price = 50000m,
                            To = new DateTime(2024, 3, 5, 15, 31, 59, 316, DateTimeKind.Local).AddTicks(4836)
                        });
                });

            modelBuilder.Entity("Rental.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RentalId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("RentalId");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("b64608ea-f373-4103-9856-2b31169acf9a"),
                            Address = "Budapest",
                            DoB = new DateTime(1970, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Smith",
                            Prefix = "MR",
                            RentalId = new Guid("5fabf3ba-ae75-432f-9d3b-ffe00c2fa8df"),
                            Street = "Kiss",
                            ZipCode = "1235"
                        });
                });

            modelBuilder.Entity("Rental.Domain.Models.Owner", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerId");

                    b.ToTable("Owner", (string)null);

                    b.HasData(
                        new
                        {
                            OwnerId = new Guid("3e5a7e66-e306-487f-bc00-25955f9deb4c"),
                            Address = "Budapest",
                            Email = "johndoe@gmail.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Doe",
                            Phone = "+36304874563",
                            Prefix = "MR",
                            Street = "Kiss",
                            ZipCode = "1452"
                        });
                });

            modelBuilder.Entity("Rental.Domain.Models.Car", b =>
                {
                    b.HasOne("Rental.Domain.Models.CarRental", "Rental")
                        .WithMany("Cars")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Rental.Domain.Models.Customer", b =>
                {
                    b.HasOne("Rental.Domain.Models.CarRental", "Rental")
                        .WithMany("Customers")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Rental.Domain.Models.CarRental", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
